package farm;

import java.awt.Font;
import java.time.format.DateTimeFormatter;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 * GUI for view crops
 * - See a list of all crops
 * - Perform watering, pest control, harvest, set as matured action on crop
 * - Delete crop
 * 
 * Name: Leong Hean Luen
 * Student ID: SUKD2301060
 * Course: Bachelor of Information Technology (BIT)
 * Subject: TCS3064 - OOP
 * Date: 22/08/2023
 * 
 * @author Hean Luen
 */
public class ViewCrops extends javax.swing.JFrame {

    private FarmManagementSystem parent;
    private Farm farm;
    private Crop crop;
    private int index;
    private final DateTimeFormatter DATETIME_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    
    /**
     * Creates new form ViewCrops
     */
    public ViewCrops() {
        initComponents();
    }
    
    public ViewCrops(Farm farm, FarmManagementSystem parent) {
        this.parent = parent;
        this.farm = farm;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTitle = new javax.swing.JLabel();
        farmCropList = new javax.swing.JList<>();
        buttonPanel = new javax.swing.JPanel();
        buttonWaterCrop = new javax.swing.JButton();
        buttonPestControl = new javax.swing.JButton();
        buttonGrowthStageMatured = new javax.swing.JButton();
        buttonHarvest = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        infromationPanel = new javax.swing.JPanel();
        labelName = new javax.swing.JLabel();
        labelNameValue = new javax.swing.JLabel();
        labelPlantingDate = new javax.swing.JLabel();
        labelPlantingDateValue = new javax.swing.JLabel();
        labelHarvestDate = new javax.swing.JLabel();
        labelHarvestDateValue = new javax.swing.JLabel();
        labelGrowthStage = new javax.swing.JLabel();
        labelGrowthStageValue = new javax.swing.JLabel();
        labelYield = new javax.swing.JLabel();
        labelYieldValue = new javax.swing.JLabel();
        logTabPanel = new javax.swing.JTabbedPane();
        wateringListScrollPane = new javax.swing.JScrollPane();
        wateringList = new javax.swing.JList<>();
        pestControlListScrollPane = new javax.swing.JScrollPane();
        pestControlList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(null);
        setName("viewCrops"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(800, 630));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        panelTitle.setFont(panelTitle.getFont().deriveFont(panelTitle.getFont().getStyle() | java.awt.Font.BOLD, panelTitle.getFont().getSize()+3));
        panelTitle.setText("View Crops");

        farmCropList.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        farmCropList.setFont(farmCropList.getFont().deriveFont(farmCropList.getFont().getSize()+2f));
        farmCropList.setVerifyInputWhenFocusTarget(false);
        farmCropList.setVisibleRowCount(50);
        farmCropList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                farmCropListValueChanged(evt);
            }
        });

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        buttonWaterCrop.setFont(buttonWaterCrop.getFont().deriveFont(buttonWaterCrop.getFont().getSize()+2f));
        buttonWaterCrop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/watering-plants32.png"))); // NOI18N
        buttonWaterCrop.setText("Watering");
        buttonWaterCrop.setEnabled(false);
        buttonWaterCrop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonWaterCrop.setPreferredSize(new java.awt.Dimension(90, 64));
        buttonWaterCrop.setRequestFocusEnabled(false);
        buttonWaterCrop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonWaterCrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonWaterCropActionPerformed(evt);
            }
        });
        buttonPanel.add(buttonWaterCrop);

        buttonPestControl.setFont(buttonPestControl.getFont().deriveFont(buttonPestControl.getFont().getSize()+2f));
        buttonPestControl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/pesticide32.png"))); // NOI18N
        buttonPestControl.setText("Pest Control");
        buttonPestControl.setEnabled(false);
        buttonPestControl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonPestControl.setPreferredSize(new java.awt.Dimension(115, 64));
        buttonPestControl.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonPestControl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPestControlActionPerformed(evt);
            }
        });
        buttonPanel.add(buttonPestControl);

        buttonGrowthStageMatured.setFont(buttonGrowthStageMatured.getFont().deriveFont(buttonGrowthStageMatured.getFont().getSize()+2f));
        buttonGrowthStageMatured.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/growth32.png"))); // NOI18N
        buttonGrowthStageMatured.setText("Mark as Matured");
        buttonGrowthStageMatured.setEnabled(false);
        buttonGrowthStageMatured.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonGrowthStageMatured.setPreferredSize(new java.awt.Dimension(145, 64));
        buttonGrowthStageMatured.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonGrowthStageMatured.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGrowthStageMaturedActionPerformed(evt);
            }
        });
        buttonPanel.add(buttonGrowthStageMatured);

        buttonHarvest.setFont(buttonHarvest.getFont().deriveFont(buttonHarvest.getFont().getSize()+2f));
        buttonHarvest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sickle32.png"))); // NOI18N
        buttonHarvest.setText("Harvest");
        buttonHarvest.setEnabled(false);
        buttonHarvest.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonHarvest.setPreferredSize(new java.awt.Dimension(86, 64));
        buttonHarvest.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonHarvest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonHarvestActionPerformed(evt);
            }
        });
        buttonPanel.add(buttonHarvest);

        buttonDelete.setFont(buttonDelete.getFont().deriveFont(buttonDelete.getFont().getSize()+2f));
        buttonDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete32.png"))); // NOI18N
        buttonDelete.setText("Delete");
        buttonDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonDelete.setPreferredSize(new java.awt.Dimension(86, 64));
        buttonDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });
        buttonPanel.add(buttonDelete);

        infromationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Information"));
        infromationPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        labelName.setFont(labelName.getFont().deriveFont(labelName.getFont().getStyle() | java.awt.Font.BOLD, labelName.getFont().getSize()+2));
        labelName.setText("Name");
        labelName.setPreferredSize(new java.awt.Dimension(160, 24));
        infromationPanel.add(labelName);

        labelNameValue.setText("-");
        labelNameValue.setPreferredSize(new java.awt.Dimension(280, 24));
        infromationPanel.add(labelNameValue);

        labelPlantingDate.setFont(labelPlantingDate.getFont().deriveFont(labelPlantingDate.getFont().getStyle() | java.awt.Font.BOLD, labelPlantingDate.getFont().getSize()+2));
        labelPlantingDate.setText("Planting Date");
        labelPlantingDate.setPreferredSize(new java.awt.Dimension(160, 24));
        infromationPanel.add(labelPlantingDate);

        labelPlantingDateValue.setText("-");
        labelPlantingDateValue.setPreferredSize(new java.awt.Dimension(280, 24));
        infromationPanel.add(labelPlantingDateValue);

        labelHarvestDate.setFont(labelHarvestDate.getFont().deriveFont(labelHarvestDate.getFont().getStyle() | java.awt.Font.BOLD, labelHarvestDate.getFont().getSize()+2));
        labelHarvestDate.setText("Harvest Date");
        labelHarvestDate.setPreferredSize(new java.awt.Dimension(160, 24));
        infromationPanel.add(labelHarvestDate);

        labelHarvestDateValue.setText("-");
        labelHarvestDateValue.setPreferredSize(new java.awt.Dimension(280, 24));
        infromationPanel.add(labelHarvestDateValue);

        labelGrowthStage.setFont(labelGrowthStage.getFont().deriveFont(labelGrowthStage.getFont().getStyle() | java.awt.Font.BOLD, labelGrowthStage.getFont().getSize()+2));
        labelGrowthStage.setText("Growth Stage");
        labelGrowthStage.setPreferredSize(new java.awt.Dimension(160, 24));
        infromationPanel.add(labelGrowthStage);

        labelGrowthStageValue.setText("-");
        labelGrowthStageValue.setPreferredSize(new java.awt.Dimension(280, 24));
        infromationPanel.add(labelGrowthStageValue);

        labelYield.setFont(labelYield.getFont().deriveFont(labelYield.getFont().getStyle() | java.awt.Font.BOLD, labelYield.getFont().getSize()+2));
        labelYield.setText("Yield");
        labelYield.setPreferredSize(new java.awt.Dimension(160, 24));
        infromationPanel.add(labelYield);

        labelYieldValue.setText("-");
        labelYieldValue.setPreferredSize(new java.awt.Dimension(280, 24));
        infromationPanel.add(labelYieldValue);

        logTabPanel.setToolTipText("");
        logTabPanel.setFont(logTabPanel.getFont().deriveFont(logTabPanel.getFont().getSize()+2f));

        wateringList.setFont(wateringList.getFont().deriveFont(wateringList.getFont().getSize()+2f));
        wateringListScrollPane.setViewportView(wateringList);

        logTabPanel.addTab("Watering History", wateringListScrollPane);

        pestControlList.setFont(pestControlList.getFont().deriveFont(pestControlList.getFont().getSize()+2f));
        pestControlListScrollPane.setViewportView(pestControlList);

        logTabPanel.addTab("Pest Control History", pestControlListScrollPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(farmCropList, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(infromationPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(buttonPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(logTabPanel))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelTitle)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(infromationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(logTabPanel))
                    .addComponent(farmCropList, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        logTabPanel.getAccessibleContext().setAccessibleName("Watering History");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void farmCropListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_farmCropListValueChanged
        if (evt.getValueIsAdjusting()) {
            return;
        }
        index = farmCropList.getSelectedIndex();
        if (index < 0) {
            index = 0;
        }
        crop = farm.getCrop(index);
        showCrop();
    }//GEN-LAST:event_farmCropListValueChanged

    private void showCrop() {
        updateCropButton();
        updateCropInformation();
        updateWateringList();
        updatePestControlList();
    }
    
    private void updateFarmCropList() {
        var cropListSize = farm.getCrops().size();
        String[] cropList = new String[ cropListSize ];
        for (int i = 0; i < cropListSize; i++) {
            cropList[ i ] = farm.getCrop(i).getName();
        }
        farmCropList.setListData(cropList);
        farmCropList.setSelectedIndex(0);
    }
    
    private void updateCropButton() {
        buttonHarvest.setEnabled(false);
        buttonWaterCrop.setEnabled(false);
        buttonPestControl.setEnabled(false);
        buttonGrowthStageMatured.setEnabled(false);
        
        if (!crop.getIsHarvested()) {
            buttonHarvest.setEnabled(true);
            buttonWaterCrop.setEnabled(true);
            buttonPestControl.setEnabled(true);
        } 
        if (crop.isSeededStage()) {
            buttonGrowthStageMatured.setEnabled(true);
        }
    }
    
    private void updateCropInformation() {
        labelNameValue.setText(crop.getName());
        labelPlantingDateValue.setText(crop.getPlantingDate().toString());
        labelHarvestDateValue.setText(crop.getHarvestDate().toString());
        labelYieldValue.setText(!crop.isHarvested ? "-" : "" + crop.getYield() + " KG");
        labelGrowthStageValue.setText(crop.getGrowthStageAsString());
    }
    
    private void updateWateringList() {
        int size = crop.getWateringHistory().size();
        String[] list = new String[ size ];
        for (int i = 0; i < size; i++) {
            list[ i ] = crop.getWateringHistory().get(i).format(DATETIME_FORMATTER);
        }
        wateringList.setListData(list);
        wateringList.setSelectedIndex(size - 1);
        wateringList.ensureIndexIsVisible(size - 1);
    }
    
    private void updatePestControlList() {
        int size = crop.getPestControlHistory().size();
        String[] list = new String[ size ];
        for (int i = 0; i < size; i++) {
            list[ i ] = crop.getPestControlHistory().get(i).format(DATETIME_FORMATTER);
        }
        pestControlList.setListData(list);
        pestControlList.setSelectedIndex(size - 1);
        pestControlList.ensureIndexIsVisible(size - 1);
    }
    
    private void showErrorDialog(String message, String title) {
        ImageIcon errorIcon = new ImageIcon("src/images/cancel64.png");
        JLabel errorLabel = new JLabel(message);
        errorLabel.setFont(new Font("Arial", Font.PLAIN, 15));
        JOptionPane.showMessageDialog(null, errorLabel, title, JOptionPane.ERROR_MESSAGE, errorIcon);
    }
    
    private void showSuccessDialog(String message, String title) {
        ImageIcon errorIcon = new ImageIcon("src/images/checked64.png");
        JLabel errorLabel = new JLabel(message);
        errorLabel.setFont(new Font("Arial", Font.PLAIN, 15));
        JOptionPane.showMessageDialog(null, errorLabel, title, JOptionPane.PLAIN_MESSAGE, errorIcon);
    }
    
    private void buttonGrowthStageMaturedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGrowthStageMaturedActionPerformed
        if (!crop.isSeededStage()) {
            showErrorDialog("This action is only applicable for seeded stage.", "Unable to Perform Action");
            return;
        }
        farm.updateGrowthStage(index, GrowthStage.MATURED);
        buttonGrowthStageMatured.setEnabled(false);
        updateCropInformation();
    }//GEN-LAST:event_buttonGrowthStageMaturedActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        updateFarmCropList();
    }//GEN-LAST:event_formWindowOpened

    private void buttonWaterCropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonWaterCropActionPerformed
        logTabPanel.setSelectedIndex(0);
        farm.applyWaterCrop(index);
        updateWateringList();
        
    }//GEN-LAST:event_buttonWaterCropActionPerformed

    private void buttonPestControlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPestControlActionPerformed
        logTabPanel.setSelectedIndex(1);
        farm.applyPestControl(index);
        updatePestControlList();
    }//GEN-LAST:event_buttonPestControlActionPerformed

    private void buttonHarvestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonHarvestActionPerformed
        if (crop.getIsHarvested()) {
            showErrorDialog("This crop has been harvest.", "Unable to Perform Action");
            return;
        }
        Font font = new Font("Arial", Font.PLAIN, 15);
        if (!crop.canHarvest() || !crop.isMaturedStage()) {
            ImageIcon errorIcon = new ImageIcon("src/images/warning64.png");
            JLabel errorLabel = new JLabel("Crop is not ready for harvest. Please confirm if you want to proceed.");
            errorLabel.setFont(font);
            int confirmation = JOptionPane.showConfirmDialog(null, errorLabel, "Are You Sure?", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, errorIcon);
            if (confirmation == JOptionPane.CANCEL_OPTION) {
                return;
            }
        }
        JLabel yieldInputLabel = new JLabel("Please enter yield (in KG)");
        yieldInputLabel.setFont(font);
        ImageIcon harvestIcon = new ImageIcon("src/images/harvest32.png");
        String yield = (String) JOptionPane.showInputDialog(null, yieldInputLabel, "Harvest Crop", JOptionPane.QUESTION_MESSAGE, harvestIcon, null, null);
        try {
            crop.setYield(Double.parseDouble(yield));
            crop.harvest();
            showSuccessDialog("Crop havested.", "Harvest Crop");
            updateCropButton();
            updateCropInformation();
        } catch (NumberFormatException e) {
            showErrorDialog("Yield must be numeric.", "Validation Error");
        }
    }//GEN-LAST:event_buttonHarvestActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        ImageIcon errorIcon = new ImageIcon("src/images/cancel64.png");
        JLabel errorLabel = new JLabel("Are you sure you want to delete this crop.");
        errorLabel.setFont(new Font("Arial", Font.PLAIN, 15));
        int confirmation = JOptionPane.showConfirmDialog(null, errorLabel, "Are You Sure?", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, errorIcon);
        if (confirmation == JOptionPane.CANCEL_OPTION) {
            return;
        }
        farm.removeCrop(index);
        if (!farm.getCrops().isEmpty()) {
            updateFarmCropList();
            parent.updateCropCount();
        } else {
            dispose();
        }
    }//GEN-LAST:event_buttonDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewCrops().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonGrowthStageMatured;
    private javax.swing.JButton buttonHarvest;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton buttonPestControl;
    private javax.swing.JButton buttonWaterCrop;
    private javax.swing.JList<String> farmCropList;
    private javax.swing.JPanel infromationPanel;
    private javax.swing.JLabel labelGrowthStage;
    private javax.swing.JLabel labelGrowthStageValue;
    private javax.swing.JLabel labelHarvestDate;
    private javax.swing.JLabel labelHarvestDateValue;
    private javax.swing.JLabel labelName;
    private javax.swing.JLabel labelNameValue;
    private javax.swing.JLabel labelPlantingDate;
    private javax.swing.JLabel labelPlantingDateValue;
    private javax.swing.JLabel labelYield;
    private javax.swing.JLabel labelYieldValue;
    private javax.swing.JTabbedPane logTabPanel;
    private javax.swing.JLabel panelTitle;
    private javax.swing.JList<String> pestControlList;
    private javax.swing.JScrollPane pestControlListScrollPane;
    private javax.swing.JList<String> wateringList;
    private javax.swing.JScrollPane wateringListScrollPane;
    // End of variables declaration//GEN-END:variables
}
